{"version":3,"file":"static/js/92.6b3f4309.chunk.js","mappings":"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","sources":["webpack://react-1/./src/pages/chat/Chat.module.scss?06b5","webpack://react-1/./src/pages/chat/ChatForm/ChatForm.module.scss?47a1","pages/chat/ChatForm/ChatForm.tsx","webpack://react-1/./src/pages/chat/Messages/Messahes.module.scss?47a9","webpack://react-1/./src/pages/chat/Messages/Message/Message.module.scss?c5fd","pages/chat/Messages/Message/Message.tsx","pages/chat/Messages/Messages.tsx","pages/chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"Chat_chat__RURbJ\",\"messages\":\"Chat_messages__AFQob\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ChatForm_form__5XF+Y\",\"formBody\":\"ChatForm_formBody__9As5v\",\"messageArea\":\"ChatForm_messageArea__CerHm\",\"button\":\"ChatForm_button__O8-cB\",\"buttonDisabled\":\"ChatForm_buttonDisabled__SKi20\",\"icon\":\"ChatForm_icon__XzG4I\"};","import { SubmitHandler, useForm } from \"react-hook-form\";\r\nimport { useState } from \"react\";\r\nimport stylles from './ChatForm.module.scss'\r\nimport classNames from \"classnames\";\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport { useAppDispatch, useAppSelector } from \"../../../redux/redux-store\";\r\nimport { sendMessage } from \"../../../redux/chat-reducer\";\r\n\r\ntype FormData = {\r\n    message: string\r\n}\r\n\r\nexport const ChatForm = () => {\r\n  const dispatch = useAppDispatch();\r\n  const status = useAppSelector(state => state.chat.status);\r\n  const [buttonIsDisabled, setButtonIsDisabled] = useState(true);\r\n\r\n  const {register, handleSubmit, reset, formState: {errors}} = useForm<FormData>();\r\n\r\n  const submit:SubmitHandler<FormData> = (formData) => {\r\n    const {message} = formData;\r\n    dispatch(sendMessage(message))\r\n    reset({message: ''})\r\n    setButtonIsDisabled(true)\r\n  }\r\n\r\n  const inputHandler = (e: React.FormEvent<HTMLTextAreaElement>) => {\r\n    let element = e.currentTarget;\r\n    if(element.value !== '') {\r\n      setButtonIsDisabled(false)\r\n    } else {\r\n      setButtonIsDisabled(true)\r\n    }\r\n    element.style.height = \"auto\"; // Скидаємо висоту\r\n    element.style.height = element.scrollHeight + \"px\"; // Встановлюємо нову висоту\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit(submit)} className={stylles.form}>\r\n        <div className={stylles.formBody}>\r\n          <textarea onInput={inputHandler} {...register('message', { required: 'field is required' })} className={classNames(stylles.messageArea, { [stylles.error]: errors.message })}\r\n          placeholder=\"Message\" ></textarea>\r\n        </div>\r\n        <button  disabled={status !== \"ready\" || buttonIsDisabled} className={classNames(stylles.button, { [stylles.buttonDisabled]: buttonIsDisabled })} > \r\n          <SendIcon className={classNames(stylles.icon)}/>\r\n        </button>\r\n      </form>\r\n    </>\r\n  )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"Messahes_messages__wt3F-\",\"bottomBody\":\"Messahes_bottomBody__mO8TD\",\"bottomBodyHiden\":\"Messahes_bottomBodyHiden__SujgE\",\"arrowBottom\":\"Messahes_arrowBottom__tUfpw\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__6jXwy\",\"messageOvner\":\"Message_messageOvner__-c7eq\",\"avatar\":\"Message_avatar__YZOh4\",\"body\":\"Message_body__aVEQH\",\"bodyOvner\":\"Message_bodyOvner__cQtaq\",\"name\":\"Message_name__OP0Zh\",\"nameOvner\":\"Message_nameOvner__0IgH2\",\"messageText\":\"Message_messageText__wSul4\"};","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport stylles from './Message.module.scss'\r\nimport { useAppSelector } from \"../../../../redux/redux-store\";\r\nimport userPhoto from '../../../../assets/images/user.jpg'\r\n\r\ntype MessageType = {\r\n    message: string,\r\n    photo: string,\r\n    userId: number,\r\n    userName: string\r\n  }\r\n  \r\n  \r\n  export const Message = React.memo(({message, photo, userName, userId}: MessageType) => {\r\n    let ovner = useAppSelector((state) => state.auth.userId);\r\n    return (\r\n      <div className={classNames(stylles.message, {[stylles.messageOvner]: ovner === userId})}>\r\n        <div className={stylles.avatar}>\r\n          <img src={photo ?? userPhoto} alt=\"avatar\" />\r\n        </div>\r\n        <div className={classNames(stylles.body, {[stylles.bodyOvner]: ovner === userId})}>\r\n        <div className={classNames(stylles.name, {[stylles.nameOvner]: ovner === userId})}>{userName}</div>\r\n          <div className={stylles.messageText}>{message}</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  });\r\n  ","import React, { useEffect, useRef, useState } from \"react\";\r\nimport stylles from './Messahes.module.scss'\r\nimport classNames from \"classnames\";\r\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\r\nimport { useAppDispatch, useAppSelector } from \"../../../redux/redux-store\";\r\nimport { startMessagesListining, stopMessagesListining } from \"../../../redux/chat-reducer\";\r\nimport { Message } from \"./Message/Message\";\r\n\r\n\r\nexport const Messages = React.memo(() => {\r\n  const dispatch = useAppDispatch();\r\n  const messages = useAppSelector(state => state.chat.messages);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [isScrollActive, setIsScrollActive] = useState(true);\r\n\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement>) => {\r\n    const element = e.currentTarget;\r\n\r\n    if(Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 30) {\r\n       !isScrollActive && setIsScrollActive(true)\r\n    } else {\r\n      isScrollActive && setIsScrollActive(false)\r\n    }\r\n  };\r\n\r\n  const bottomHandler = () => {\r\n    setIsScrollActive(true)\r\n  }\r\n  \r\n  useEffect(() => {\r\n    dispatch(startMessagesListining());\r\n\r\n    return () => {\r\n      dispatch(stopMessagesListining());\r\n  };\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    if(containerRef.current && isScrollActive) {\r\n      containerRef.current.scrollTop = containerRef.current.scrollHeight;\r\n    }\r\n  }, [messages, isScrollActive]);\r\n\r\n  return (\r\n    <div className={stylles.messages} ref={containerRef} onScroll={scrollHandler} >\r\n      <div onClick={bottomHandler} className={classNames(stylles.bottomBody, { [stylles.bottomBodyHiden]: isScrollActive })}>\r\n        <ArrowDownwardIcon className={stylles.arrowBottom} />\r\n      </div>\r\n      {\r\n        messages.map(m => <Message key={m.id} {...m} />)\r\n      }\r\n    </div>\r\n  )\r\n})\r\n\r\n\r\n","import stylles from './Chat.module.scss'\r\nimport { ChatForm } from './ChatForm/ChatForm';\r\nimport { Messages } from './Messages/Messages';\r\n\r\n\r\nconst ChatPage = () => {\r\n\r\n  return <Chat />\r\n};\r\n\r\n\r\nconst Chat = () => {\r\n\r\n  return (\r\n    <div className={stylles.chat}>\r\n      <div className={stylles.messages}>\r\n          <div><Messages /></div>\r\n      </div>\r\n      <div className={stylles.chatForm}><ChatForm /></div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default ChatPage;\r\n\r\n"],"names":["ChatForm","dispatch","useAppDispatch","status","useAppSelector","state","chat","buttonIsDisabled","setButtonIsDisabled","useState","register","handleSubmit","reset","formState","errors","useForm","_jsx","_Fragment","children","_jsxs","onSubmit","formData","message","sendMessage","className","stylles","form","formBody","onInput","e","element","currentTarget","value","style","height","scrollHeight","required","classNames","messageArea","error","placeholder","disabled","button","buttonDisabled","SendIcon","icon","Message","React","_ref","photo","userName","userId","ovner","auth","src","userPhoto","alt","Messages","messages","containerRef","useRef","isScrollActive","setIsScrollActive","useEffect","startMessagesListining","stopMessagesListining","current","scrollTop","ref","onScroll","Math","abs","clientHeight","onClick","bottomHandler","ArrowDownwardIcon","map","m","id","Chat","chatForm","ChatPage"],"sourceRoot":""}